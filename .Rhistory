render("covid_trellis_latest-example.Rmd",html_document())
system("open covid_trellis_latest-example.html")
library(trelliscopejs)
library(listdown)
library(tidyverse)
library(rmarkdown)
covidcountries <- read.csv("WHO-COVID-19-global-data.csv",
colClasses=c("Date", rep("character", 3),
rep("numeric", 4)), fileEncoding="UTF-8-BOM")
covidcountries <- covidraw %>% select(-Cumulative_cases, -Cumulative_deaths)
# Creating the list
comp_comp_covid_trellis_latest <- list(
Data = covidcountries,
`New cases per day for each Country` = ggplot(covidcountries) + geom_point(aes(x=Date_reported, y=New_cases, group=Country)) +
geom_line(aes(x=Date_reported, y=New_cases, group=Country)) +  scale_x_date(date_labels = "%Y (%b)") +
theme_bw() +
labs(title = "New cases per day by Country") +
facet_wrap(vars(Country))
)
#Save file to the disk
saveRDS(comp_comp_covid_trellis_latest, "comp_comp_covid_trellis_latest.rds")
# Creating the listdown package
ld_covid_tellis_latest <- listdown(load_cc_expr = readRDS("comp_comp_covid_trellis_latest.rds"),
package = c("ggplot2","trelliscopejs"),
decorator = list(ggplot = facet_wrap2ts)
)
# Adding a header
covid_trellis_latest_example <- c(
as.character(ld_rmarkdown_header("latest Covid plots using trelliscopeJS",
author = "Leon",
date = "2021")),
ld_make_chunks(ld_covid_tellis_latest))
# Rendering
writeLines(covid_trellis_latest_example, "covid_trellis_latest-example.Rmd")
render("covid_trellis_latest-example.Rmd",html_document())
system("open covid_trellis_latest-example.html")
library(trelliscopejs)
library(listdown)
library(tidyverse)
library(rmarkdown)
covidcountries <- read.csv("WHO-COVID-19-global-data.csv",
colClasses=c("Date", rep("character", 3),
rep("numeric", 4)), fileEncoding="UTF-8-BOM")
covidcountries <- covidraw %>% select(-Cumulative_cases, -Cumulative_deaths)
# Creating the list
comp_comp_covid_trellis_latest <- list(
Data = covidcountries,
`New cases per day for each Country` = ggplot(covidcountries) + geom_point(aes(x=Date_reported, y=New_cases, group=Country)) +
geom_line(aes(x=Date_reported, y=New_cases, group=Country)) +  scale_x_date(labels = date_format("%m-%Y")) +
theme_bw() +
labs(title = "New cases per day by Country") +
facet_wrap(vars(Country))
)
library(trelliscopejs)
library(listdown)
library(tidyverse)
library(rmarkdown)
covidcountries <- read.csv("WHO-COVID-19-global-data.csv",
colClasses=c("Date", rep("character", 3),
rep("numeric", 4)), fileEncoding="UTF-8-BOM")
covidcountries <- covidraw %>% select(-Cumulative_cases, -Cumulative_deaths)
# Creating the list
comp_comp_covid_trellis_latest <- list(
Data = covidcountries,
`New cases per day for each Country` = ggplot(covidcountries) + geom_point(aes(x=Date_reported, y=New_cases, group=Country)) +
geom_line(aes(x=Date_reported, y=New_cases, group=Country)) +  scale_x_date(date_breaks = "1 month", date_labels =  "%b %Y")  +
theme(axis.text.x=element_text(angle=60, hjust=1)) +
theme_bw() +
labs(title = "New cases per day by Country") +
facet_wrap(vars(Country))
)
#Save file to the disk
saveRDS(comp_comp_covid_trellis_latest, "comp_comp_covid_trellis_latest.rds")
# Creating the listdown package
ld_covid_tellis_latest <- listdown(load_cc_expr = readRDS("comp_comp_covid_trellis_latest.rds"),
package = c("ggplot2","trelliscopejs"),
decorator = list(ggplot = facet_wrap2ts)
)
# Adding a header
covid_trellis_latest_example <- c(
as.character(ld_rmarkdown_header("latest Covid plots using trelliscopeJS",
author = "Leon",
date = "2021")),
ld_make_chunks(ld_covid_tellis_latest))
# Rendering
writeLines(covid_trellis_latest_example, "covid_trellis_latest-example.Rmd")
render("covid_trellis_latest-example.Rmd",html_document())
system("open covid_trellis_latest-example.html")
ggplot(covidcountries) + geom_point(aes(x=Date_reported, y=New_cases, group=Country)) +
geom_line(aes(x=Date_reported, y=New_cases, group=Country)) +  scale_x_date(date_breaks = "3 month", date_labels =  "%b %Y") +
theme_bw() +
labs(title = "New cases per day by Country") +
facet_wrap(vars(Country))
library(trelliscopejs)
library(listdown)
library(tidyverse)
library(rmarkdown)
covidcountries <- read.csv("WHO-COVID-19-global-data.csv",
colClasses=c("Date", rep("character", 3),
rep("numeric", 4)), fileEncoding="UTF-8-BOM")
covidcountries <- covidraw %>% select(-Cumulative_cases, -Cumulative_deaths)
# Creating the list
comp_comp_covid_trellis_latest <- list(
Data = covidcountries,
`New cases per day for each Country` = ggplot(covidcountries) + geom_point(aes(x=Date_reported, y=New_cases, group=Country)) +
geom_line(aes(x=Date_reported, y=New_cases, group=Country)) +  scale_x_date(date_breaks = "3 month", date_labels =  "%b %Y") +
theme_bw() +
labs(title = "New cases per day by Country") +
facet_wrap(vars(Country))
)
#Save file to the disk
saveRDS(comp_comp_covid_trellis_latest, "comp_comp_covid_trellis_latest.rds")
# Creating the listdown package
ld_covid_tellis_latest <- listdown(load_cc_expr = readRDS("comp_comp_covid_trellis_latest.rds"),
package = c("ggplot2","trelliscopejs"),
decorator = list(ggplot = facet_wrap2ts)
)
# Adding a header
covid_trellis_latest_example <- c(
as.character(ld_rmarkdown_header("latest Covid plots using trelliscopeJS",
author = "Leon",
date = "2021")),
ld_make_chunks(ld_covid_tellis_latest))
# Rendering
writeLines(covid_trellis_latest_example, "covid_trellis_latest-example.Rmd")
render("covid_trellis_latest-example.Rmd",html_document())
system("open covid_trellis_latest-example.html")
ld_decorator
ld_decorator <- listdown(load_cc_expr = readRDS("comp-comp_covid.rds"),
package = c("ggplot2", "tidyverse","scales", "plotly"),
decorator = list(ggplot = ggplotly))
#Add in data and decorators
library(listdown)
ld_decorator <- listdown(load_cc_expr = readRDS("comp-comp_covid.rds"),
package = c("ggplot2", "tidyverse","scales", "plotly"),
decorator = list(ggplot = ggplotly))
ld_decorator
#Making a listdown object
library(listdown)
library(knitr)
ld_new <- listdown(load_cc_expr = readRDS("comp-comp_covid.rds"),
package = c("ggplot2", "tidyverse","scales"))
class(ld_new)
ld_new
class(ld_decorator)
ld_decorator
library(listdown)
library(gapminder)
library(trelliscopejs)
library(ggplot2)
library(tidyverse)
library(DT)
library(rmarkdown)
# Load the gapminder data set.
data(gapminder)
# Creating the computational components
comp_comp_gapminder <- list(
Data = gapminder,
`life expectancy` = ggplot( gapminder) + geom_point(aes(x = year, y = lifeExp)) +
xlim(1948, 2011) + ylim(10, 95) +
theme_bw() +
labs(title = "life expectancy by continent") +
facet_wrap(~ country + continent))
#Save file to the disk
saveRDS(comp_comp_gapminder, "comp-comp_gapminder.rds")
# A not very effective visualization
ld_gapminder <- listdown(load_cc_expr = readRDS("comp-comp_gapminder.rds"),
package = c("ggplot2","gapminder"))
gapminder_example <- c(
as.character(ld_rmarkdown_header("gapminder plots",
author = "Leon",
date = "2021")),
ld_make_chunks(ld_gapminder))
writeLines(gapminder_example, "gapminder-example.Rmd")
render("gapminder-example.Rmd",html_document())
system("open gapminder-example.html")
# Created a generic function for telliscope
# y is an ggplot object
facet_wrap2ts <- function(y){
if (is(y$facet, "Facet") && !is(y, "FacetNull")) {
## get variables
v = y$facet$vars()
## construct Null facet to replace it
o = ggplot()
facetNull = o$facet
y$facet = facetNull
## construct the formula
form = eval(parse(text=paste0("~ ", paste(v, collapse=" + "))))
## construct call
c = as.call(list(quote(facet_trelliscope), eval(parse(text=paste0("~ ", paste(v, collapse=" + ")))),
ncol = 2,path="."))
y + eval(c)
} else y
}
## Same data set as the first example, switching the decorator this time instead of adding initial expression
ld_gapminder_trellis_generic <- listdown(load_cc_expr = readRDS("comp-comp_gapminder.rds"),
package = c("ggplot2","gapminder", "trelliscopejs"),
decorator = list(ggplot = facet_wrap2ts)
)
gapminder_trellis_generic_example <- c(
as.character(ld_rmarkdown_header("gapminder plots trelliscope generic",
author = "Leon",
date = "2021")),
ld_make_chunks(ld_gapminder_trellis_generic))
writeLines(gapminder_trellis_generic_example, "gapminder_trellis_generic-example.Rmd")
render("gapminder_trellis_generic-example.Rmd",html_document())
system("open gapminder_trellis_generic-example.html")
facet_tsplotly <- function(p) {
if (is(p$facet, "Facet") && !is(p, "FacetNull")) {
v = p$facet$vars()
o = ggplot()
FacetNull = o$facet
p$facet = FacetNull
form = eval(parse(text=paste0("~ ", paste(v, collapse=" + "))))
c = as.call(list(quote(facet_trelliscope), eval(parse(text=paste0("~ ", paste(v, collapse=" + ")))),
ncol = 2,path=".", as_plotly = TRUE))
p + eval(c)
}  else p
}
## Still the same data set as the first example
ld_gapminder_trellis_plotly <- listdown(load_cc_expr = readRDS("comp-comp_gapminder.rds"),
package = c("ggplot2","gapminder", "trelliscopejs","plotly"),
decorator = list(ggplot = facet_tsplotly)
)
gapminder_trellis_plotly_example <- c(
as.character(ld_rmarkdown_header("gapminder plots trelliscope plotly",
author = "Leon",
date = "2021")),
ld_make_chunks(ld_gapminder_trellis_plotly))
writeLines(gapminder_trellis_plotly_example, "gapminder_trellis_plotly-example.Rmd")
render("gapminder_trellis_plotly-example.Rmd",html_document())
system("open gapminder_trellis_plotly-example.html")
facet_tsplotly <- function(p) {
if (is(p$facet, "Facet") && !is(p, "FacetNull")) {
v = p$facet$vars()
o = ggplot()
FacetNull = o$facet
p$facet = FacetNull
form = eval(parse(text=paste0("~ ", paste(v, collapse=" + "))))
c = as.call(list(quote(facet_trelliscope), eval(parse(text=paste0("~ ", paste(v, collapse=" + ")))),
ncol = 2,path=".", as_plotly = TRUE))
p + eval(c)
}  else p
}
## Still the same data set as the first example
ld_gapminder_trellis_plotly <- listdown(load_cc_expr = readRDS("comp-comp_gapminder.rds"),
package = c("ggplot2","gapminder", "trelliscopejs","plotly"),
decorator = list(ggplot = facet_tsplotly)
)
gapminder_trellis_plotly_example <- c(
as.character(ld_rmarkdown_header("gapminder plots trelliscope plotly",
author = "Leon",
date = "2021")),
ld_make_chunks(ld_gapminder_trellis_plotly))
writeLines(gapminder_trellis_plotly_example, "gapminder_trellis_plotly-example.Rmd")
render("gapminder_trellis_plotly-example.Rmd",html_document())
system("open gapminder_trellis_plotly-example.html")
webshot::install_phantomjs()
library(phantomjs
library(phantomjs)
library(phantomjs)
## Still the same data set as the first example
ld_gapminder_trellis_plotly <- listdown(load_cc_expr = readRDS("comp-comp_gapminder.rds"),
package = c("ggplot2","gapminder", "trelliscopejs","plotly"),
decorator = list(ggplot = facet_tsplotly)
)
gapminder_trellis_plotly_example <- c(
as.character(ld_rmarkdown_header("gapminder plots trelliscope plotly",
author = "Leon",
date = "2021")),
ld_make_chunks(ld_gapminder_trellis_plotly))
writeLines(gapminder_trellis_plotly_example, "gapminder_trellis_plotly-example.Rmd")
render("gapminder_trellis_plotly-example.Rmd",html_document())
system("open gapminder_trellis_plotly-example.html")
# What trelliscope would look like when we use trelliscope instead of facet
library(ggplot2)
library(trelliscopejs)
ggplot( gapminder) + geom_point(aes(x = year, y = lifeExp)) +
xlim(1948, 2011) + ylim(10, 95) + theme_bw() +
facet_trelliscope(~ country + continent, nrow = 2, ncol = 7, width = 300)
# Creating the computational components, this time without the 'facet_wrap' call.
comp_comp_gapminder_trellis <- list(
Data = gapminder,
`life expectancy full` = ggplot(gapminder) + geom_point(aes(x = year, y = lifeExp)) +
xlim(1948, 2011) + ylim(10, 95) +
theme_bw() +
labs(title = "life expectancy by continent"))
#Save file to the disk
saveRDS(comp_comp_gapminder_trellis, "comp-comp_gapminder_trellis.rds")
facet_tsplotly <- function(p) {
if (is(p$facet, "Facet") && !is(p, "FacetNull")) {
v = p$facet$vars()
o = ggplot()
FacetNull = o$facet
p$facet = FacetNull
form = eval(parse(text=paste0("~ ", paste(v, collapse=" + "))))
c = as.call(list(quote(facet_trelliscope), eval(parse(text=paste0("~ ", paste(v, collapse=" + ")))),
ncol = 2,path=".", as_plotly = TRUE))
p + eval(c)
}  else p
}
## Still the same data set as the first example
ld_gapminder_trellis_plotly <- listdown(load_cc_expr = readRDS("comp-comp_gapminder.rds"),
package = c("ggplot2","gapminder", "trelliscopejs","plotly"),
decorator = list(ggplot = facet_tsplotly)
)
gapminder_trellis_plotly_example <- c(
as.character(ld_rmarkdown_header("gapminder plots trelliscope plotly",
author = "Leon",
date = "2021")),
ld_make_chunks(ld_gapminder_trellis_plotly))
writeLines(gapminder_trellis_plotly_example, "gapminder_trellis_plotly-example.Rmd")
render("gapminder_trellis_plotly-example.Rmd",html_document())
system("open gapminder_trellis_plotly-example.html")
library(plotly)
library(plotly)
## Still the same data set as the first example
ld_gapminder_trellis_plotly <- listdown(load_cc_expr = readRDS("comp-comp_gapminder.rds"),
package = c("ggplot2","gapminder", "trelliscopejs","plotly"),
decorator = list(ggplot = facet_tsplotly)
)
gapminder_trellis_plotly_example <- c(
as.character(ld_rmarkdown_header("gapminder plots trelliscope plotly",
author = "Leon",
date = "2021")),
ld_make_chunks(ld_gapminder_trellis_plotly))
writeLines(gapminder_trellis_plotly_example, "gapminder_trellis_plotly-example.Rmd")
render("gapminder_trellis_plotly-example.Rmd",html_document())
system("open gapminder_trellis_plotly-example.html")
facet_tsplotly <- function(p) {
if (is(p$facet, "Facet") && !is(p, "FacetNull")) {
v = p$facet$vars()
o = ggplot()
FacetNull = o$facet
p$facet = FacetNull
form = eval(parse(text=paste0("~ ", paste(v, collapse=" + "))))
c = as.call(list(quote(facet_trelliscope), eval(parse(text=paste0("~ ", paste(v, collapse=" + ")))),
ncol = 2,path=".", as_plotly = TRUE))
p + eval(c)
}  else p
}
facet_tsplotly <- function(p) {
if (is(p$facet, "Facet") && !is(p, "FacetNull")) {
v = p$facet$vars()
o = ggplot()
FacetNull = o$facet
p$facet = FacetNull
form = eval(parse(text=paste0("~ ", paste(v, collapse=" + "))))
c = as.call(list(quote(facet_trelliscope), eval(parse(text=paste0("~ ", paste(v, collapse=" + ")))),
ncol = 2,path=".", as_plotly = TRUE))
p + eval(c)
}  else p
}
facet_tsplotly <- function(p) {
if (is(p$facet, "Facet") && !is(p, "FacetNull")) {
v = p$facet$vars()
o = ggplot()
FacetNull = o$facet
p$facet = FacetNull
form = eval(parse(text=paste0("~ ", paste(v, collapse=" + "))))
c = as.call(list(quote(facet_trelliscope), eval(parse(text=paste0("~ ", paste(v, collapse=" + ")))),
ncol = 2,path=".", as_plotly = TRUE))
p + eval(c)
}  else p
}
facet_tsplotly <- function(p) {
if (is(p$facet, "Facet") && !is(p, "FacetNull")) {
v = p$facet$vars()
o = ggplot()
FacetNull = o$facet
p$facet = FacetNull
form = eval(parse(text=paste0("~ ", paste(v, collapse=" + "))))
c = as.call(list(quote(facet_trelliscope), eval(parse(text=paste0("~ ", paste(v, collapse=" + ")))),
ncol = 2,path=".", as_plotly = TRUE))
p + eval(c)
}  else p
}
facet_tsplotly <- function(p) {
if (is(p$facet, "Facet") && !is(p, "FacetNull")) {
v = p$facet$vars()
o = ggplot()
FacetNull = o$facet
p$facet = FacetNull
form = eval(parse(text=paste0("~ ", paste(v, collapse=" + "))))
c = as.call(list(quote(facet_trelliscope), eval(parse(text=paste0("~ ", paste(v, collapse=" + ")))),
ncol = 2,path=".", as_plotly = TRUE))
p + eval(c)
}  else p
}
facet_tsplotly <- function(p) {
if (is(p$facet, "Facet") && !is(p, "FacetNull")) {
v = p$facet$vars()
o = ggplot()
FacetNull = o$facet
p$facet = FacetNull
form = eval(parse(text=paste0("~ ", paste(v, collapse=" + "))))
c = as.call(list(quote(facet_trelliscope), eval(parse(text=paste0("~ ", paste(v, collapse=" + ")))),
ncol = 2,path=".", as_plotly = TRUE))
p + eval(c)
}  else p
}
facet_tsplotly <- function(p) {
if (is(p$facet, "Facet") && !is(p, "FacetNull")) {
v = p$facet$vars()
o = ggplot()
FacetNull = o$facet
p$facet = FacetNull
form = eval(parse(text=paste0("~ ", paste(v, collapse=" + "))))
c = as.call(list(quote(facet_trelliscope), eval(parse(text=paste0("~ ", paste(v, collapse=" + ")))),
ncol = 2,path=".", as_plotly = TRUE))
p + eval(c)
}  else p
}
facet_tsplotly <- function(p) {
if (is(p$facet, "Facet") && !is(p, "FacetNull")) {
v = p$facet$vars()
o = ggplot()
FacetNull = o$facet
p$facet = FacetNull
form = eval(parse(text=paste0("~ ", paste(v, collapse=" + "))))
c = as.call(list(quote(facet_trelliscope), eval(parse(text=paste0("~ ", paste(v, collapse=" + ")))),
ncol = 2,path=".", as_plotly = TRUE))
p + eval(c)
}  else p
}
library(plotly)
## Still the same data set as the first example
ld_gapminder_trellis_plotly <- listdown(load_cc_expr = readRDS("comp-comp_gapminder.rds"),
package = c("ggplot2","gapminder", "trelliscopejs","plotly"),
decorator = list(ggplot = facet_tsplotly)
)
gapminder_trellis_plotly_example <- c(
as.character(ld_rmarkdown_header("gapminder plots trelliscope plotly",
author = "Leon",
date = "2021")),
ld_make_chunks(ld_gapminder_trellis_plotly))
writeLines(gapminder_trellis_plotly_example, "gapminder_trellis_plotly-example.Rmd")
render("gapminder_trellis_plotly-example.Rmd",html_document())
system("open gapminder_trellis_plotly-example.html")
library(trelliscopejs)
library(listdown)
library(tidyverse)
library(rmarkdown)
#Reading in the data
covidcountries <- read.csv("WHO-COVID-19-global-data.csv",
colClasses=c("Date", rep("character", 3),
rep("numeric", 4)), fileEncoding="UTF-8-BOM")
# Creating the list
comp_comp_covid_trellis <- list(
Data = covidcountries,
`New cases per day for each Country` = ggplot(covidcountries) + geom_point(aes(x=Date_reported, y=New_cases, group=Country), size = 0.6) +
geom_line(aes(x=Date_reported, y=New_cases, group=Country), size = 0.4) +  scale_x_date(date_breaks = "3 month", date_labels =  "%b %Y") +
theme_bw() +
labs(title = "New cases per day by Country") +
facet_wrap(vars(Country))
)
#Save file to the disk
saveRDS(comp_comp_covid_trellis, "comp-comp_covid_trellis.rds")
# Creating the listdown package
ld_covid_trellis <- listdown(load_cc_expr = readRDS("comp-comp_covid_trellis.rds"),
package = c("ggplot2","trelliscopejs"),
decorator = list(ggplot = facet_tsplotly)
)
# Adding a header
covid_trellis_example <- c(
as.character(ld_rmarkdown_header("Covid plots using trelliscopeJS",
author = "Leon",
date = "2021")),
ld_make_chunks(ld_covid_trellis))
# Rendering
writeLines(covid_trellis_example, "covid_trellis-example.Rmd")
render("covid_trellis-example.Rmd",html_document())
system("open covid_trellis-example.html")
library(ggplot2)
library(gapminder)
library(listdown)
library(gapminder)
library(trelliscopejs)
library(ggplot2)
library(tidyverse)
library(DT)
library(rmarkdown)
# Load the gapminder data set.
data(gapminder)
# Creating the computational components
comp_comp_gapminder <- list(
Data = gapminder,
`life expectancy` = ggplot( gapminder) + geom_point(aes(x = year, y = lifeExp)) +
xlim(1948, 2011) + ylim(10, 95) +
theme_bw() +
labs(title = "life expectancy by continent") +
facet_wrap(~ country + continent))
#Save file to the disk
saveRDS(comp_comp_gapminder, "comp-comp_gapminder.rds")
# A not very effective visualization
ld_gapminder <- listdown(load_cc_expr = readRDS("comp-comp_gapminder.rds"),
package = c("ggplot2","gapminder"))
gapminder_example <- c(
as.character(ld_rmarkdown_header("gapminder plots",
author = "Leon",
date = "2021")),
ld_make_chunks(ld_gapminder))
writeLines(gapminder_example, "gapminder-example.Rmd")
render("gapminder-example.Rmd",html_document())
system("open gapminder-example.html")
# What trelliscope would look like when we use trelliscope instead of facet
library(ggplot2)
library(trelliscopejs)
ggplot( gapminder) + geom_point(aes(x = year, y = lifeExp)) +
xlim(1948, 2011) + ylim(10, 95) + theme_bw() +
facet_trelliscope(~ country + continent, nrow = 2, ncol = 7, width = 300)
?inherits()
